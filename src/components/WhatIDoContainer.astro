---
import { Image } from "astro:assets";
import DesignWebAppImage from '../../public/design-webapp.png';
import DesignPhoneImage from '../../public/mobile-app.png';
import DesignSystemImage from '../../public/design-system.png';
import ChatContainer from './ChatContainer.astro';
---


<!-- public/mobile-app.png public/design-webapp.png public/design-system.png -->
<div class="flex flex-col gap-4 py-8">
    <div class="flex w-full gap-4">
        <div class="container cont-1 p-8 rounded-3xl w-full overflow-hidden">
            <div class="parallax-container">
                <Image  decoding="async" loading="lazy" src={DesignWebAppImage} draggable={false} width={280} height={280} class="parallax-image rounded-lg shadow-lg translate-x-48 -translate-y-24 rotate-[10deg]" alt="Web Apps." />
                <h5>Web apps.</h5>
                <p>We will design sleek and responsive web apps for any business challenge.</p>
            </div>
        </div>
        <div class="container cont-2 p-8 rounded-3xl max-w-[400px]">
            <div class="parallax-container">
                <Image  decoding="async" loading="lazy" src={DesignPhoneImage} draggable={false} width={220} height={220} class="parallax-image  translate-x-12" alt="Mobile Apps." />
                <h5>Mobile apps.</h5>
                <p>We will Design, refine, and make your app shine above the competition.</p>
            </div>
        </div>
    </div>
    <div class="flex w-full gap-4">
        <div class="container cont-4 p-8 rounded-3xl max-w-[400px] overflow-hidden">
            <div class="parallax-container">
                <Image 
  decoding="async" loading="lazy" src={DesignSystemImage} draggable={false} width={220} height={220} class=" parallax-image  rounded-lg shadow-lg  -translate-x-2 -translate-y-24 -rotate-[10deg]" alt="Design System." />
                <h5>Design System</h5>
                <p>We'll tear apart your exisitng product and help you optimize your product for better results.</p>
            </div>
        </div>
        <div class="container cont-3 p-8 rounded-3xl w-full overflow-hidden">
            <div class="parallax-container">
                <ChatContainer />
                <h5>Consulting</h5>
                <p class="text-sm">We will build robust and cohesive design systems for any business challenge.</p>
            </div>
        </div>
        
    </div>
    <h6 class="text-center text-sm text-gray-500 pt-8">We do much more,but there are the things we're really good at.</h6>
</div>

<style>
    .container{
        background-color: rgba(var(--pink-light));
        transition: .4s all ease;
    }

    .parallax-container {
            display: flex;
            flex-direction: column;
            justify-content: end;
            height: 100%;
            position: relative;
    }
   
    .parallax-image {
        transition: transform 0.2s ease-out;
    }

    
    .container p{
      font-size: 0.875rem ;
    line-height: 1.25rem ;
   
    }
    .container:hover{
        box-shadow: 0 0 10px rgba(var(--pink-light));
    }
    .container.cont-1{
        background-color: rgba(var(--pink-light));
    }
    .container.cont-2{
        background-color: rgba(var(--cream));
    }
    .container.cont-3{
        background-color: rgba(var(--blue));
    }
    .container.cont-4{
        background-color: rgba(var(--bright-grey));
    }
</style>



<script>
    function handleParallax(e: MouseEvent, container: HTMLElement) {
        const image = container.querySelector('.parallax-image');
        if (!image) return;

        const rect = container.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;

        const centerX = rect.width / 2;
        const centerY = rect.height / 2;

        const moveX = (x - centerX) / centerX * -20;
        const moveY = (y - centerY) / centerY * -20;

        (image as HTMLElement).style.transform = `translate(${moveX}px, ${moveY}px)`;
    }

    function resetParallax(container: HTMLElement) {
        const image = container.querySelector('.parallax-image');
        if (!image) return;
        (image as HTMLElement).style.transform = '';
    }

    document.querySelectorAll('.parallax-container').forEach(container => {
        container.addEventListener('mousemove', (e) => handleParallax(e as MouseEvent, container as HTMLElement));
        container.addEventListener('mouseleave', () => resetParallax(container as HTMLElement));
    });
</script>