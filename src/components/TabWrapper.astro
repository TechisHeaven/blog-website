---
import { Icon } from 'astro-icon/components';
import { ViewTransitions } from 'astro:transitions';

---

<ViewTransitions />
<div class={`tab-wrapper font-semibold website`} data-scroll-animate>
    <Icon name={'website'} />
    Website
</div>
<div class={`tab-wrapper font-semibold webapp`} data-scroll-animate>
    <Icon name={'flash'} />
    Web Apps
</div>
<div class={`tab-wrapper font-semibold blogs`} data-scroll-animate>
    <Icon name={'quill-pen'} />
    Blogs Website
</div>
<div class={`tab-wrapper font-semibold webdesign`} data-scroll-animate>
    <Icon name={'design-idea'} />
    Web Designs
</div>
<div class={`tab-wrapper font-semibold ecom`} data-scroll-animate>
    <Icon name={'store'} />
    E-Commerce
</div>

<style>
    
    div{
        font-size: 1.6em;
        line-height: 1.4em;
        padding: 0em .4em;
        width: fit-content;
        display: inline-flex;
        align-items: center;
        gap: .4em;
        border-radius: .4em;
        box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, .2);
        background-color: rgba(var(--minty-lime));
        color: rgba(var(--minty-lime-dark));
        position: relative;
    }

    div.website{
        background-color: rgba(var(--minty-lime));
        color: rgba(var(--minty-lime-dark));
        transform: translate(100px, -20px);
        rotate: 10deg;
        z-index: 10;
        box-shadow: 0px 2px 2px 0px rgba(var(--minty-lime-dark));
    }
  
    div.webapp{
         background-color: rgba(var(--blue));
        color: rgba(var(--blue-dark));
        box-shadow: 0px 2px 2px 0px rgba(var(--blue-dark));  
        transform: translate(-160px, 4px);
        rotate: -6deg;
        z-index: -1;
    }
    div.blogs{
         background-color: rgba(var(--orange));
        color: rgba(var(--orange-dark));
        box-shadow: 0px 2px 2px 0px rgba(var(--orange-dark));
         transform: translate(140px, 8px);
        rotate: -8deg;
        z-index: -2;
    }

    div.webdesign{
         background-color: rgba(var(--pink));
        color: rgba(var(--pink-dark));
        box-shadow: 0px 2px 2px 0px rgba(var(--pink-dark));
        transform: translate(120px, -110px);
        rotate: 4deg;
        z-index:-3;

    }
    div.ecom{
         background-color: rgba(var(--green));
        color: rgba(var(--green-dark));
        box-shadow: 0px 2px 2px 0px rgba(var(--green-dark));
         transform: translate(70px, -80px);
        rotate: 4deg;
        z-index: -6;
    }


    @media (max-width: 420px) {
      div.webapp{
          transform: translate(0, 4px);
      }
    }
    @media (max-width: 380px) {
      div{
          transform: translate(0, 4px);
      }

        div.webapp{
          transform: translate(0, 4px);
      }
        div.blogs{
          transform: translate(0, 4px);
      }
        div.webdesign{
          transform: translate(0, 4px);
      }
    }
</style>



<script>
  function generateRandomParams() {
    return {
      direction: Math.random() > .8 ? 1 : -1,
      speed: Math.random() * 0.9 + 0.1,
      rotationSpeed: (Math.random() * 0.1 + 0.05) * (Math.random() > 0.5 ? 1 : -1),
      verticalShift: Math.random() * .2 - 0.15,
      horizontalAmplitude: Math.random() * 100 + 200
    };
  }
 const elements = document.querySelectorAll('[data-scroll-animate]');
  const params = Array.from(elements).map(() => generateRandomParams());
  const initialPositions = Array.from(elements).map(el => {
    const style = window.getComputedStyle(el);
    return {
      transform: style.transform,
      zIndex: style.zIndex
    };
  });

  function handleScroll() {
    const scrollPosition = window.scrollY;
    const maxScroll = document.documentElement.scrollHeight - window.innerHeight;
    const scrollPercentage = scrollPosition / maxScroll;
    
    elements.forEach((el, index) => {
      const { direction, speed, rotationSpeed, verticalShift, horizontalAmplitude } = params[index];
      const horizontalMovement = Math.sin(scrollPosition * speed * 0.01) * horizontalAmplitude * direction;
      const verticalMovement = scrollPosition * verticalShift;
      const rotation = scrollPosition * rotationSpeed;

      // Interpolate between animated position and initial position
      const t = Math.max(0, Math.min(1, (scrollPercentage - 0.8) * 5)); // Start transition at 80% scroll
      const interpolatedTransform = `
        translate(
          ${horizontalMovement * (1 - t)}px,
          ${verticalMovement * (1 - t)}px
        )
        rotate(${rotation * (1 - t)}deg)
      `;

      (el as HTMLElement).style.transform = `${initialPositions[index].transform} ${interpolatedTransform}`;
      (el as HTMLElement).style.zIndex = scrollPercentage > 0.9 ? initialPositions[index].zIndex : '';
    });
  }

  document.addEventListener('astro:page-load', () => {
    window.addEventListener('scroll', handleScroll);
  });

  document.addEventListener('astro:before-preparation', () => {
    window.removeEventListener('scroll', handleScroll);
  });
</script>