

---


---

<div class="p-4 md:p-20 mb-20 w-full relative flex flex-col gap-16">
    <p class="text-xs absolute left-40 -top-2 sm:-top-10 cursive rotate-6">When i'm not out<br>&shy; with my bae or at Gym...</p>
    <h3 class="text-center">You'll catch me doing<br>&shy; a combo of these things:</h3>

    <div class="containers flex flex-col sm:flex-row w-full">
        <div class="container things -rotate-6 z-10 ">
            <div class="container-content">
                <h6 class="skill-heading text-sm">things I create</h6>
                <ul class="skill-list">
                    <li>Website Design</li>
                    <li>App Development</li>
                    <li>UI/UX Design</li>
                    <li>Graphic Design</li>
                    <li>Digital Marketing</li>
                </ul>
        </div>
        </div>
        <div class="container product z-10 rotate-12">
            <div class="container-content">
                <h6   class="skill-heading text-sm">for product in</h6>
                <ul class="skill-list">
                    <li>React JS</li>
                    <li>Next JS</li>
                    <li>Node JS</li>
                    <li>React Native</li>
                    <li>Typescript</li>
                </ul>
        </div>
        </div>
        <div class="container tools z-20  rotate-3 ">   
            <div class="container-content">
                <h6 class="skill-heading text-sm">using tools like</h6>
                <ul class="skill-list">
                    <li>Figma</li>
                    <li>Framer</li>
                    <li>Webflow</li>
                    <li>Wordpress</li>
                    <li class="text-gray-400">and more</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<style>

@import url('https://fonts.googleapis.com/css2?family=Allura&display=swap');


    .cursive{
        color: rgba(var(--slate));
        font-size: .8em;
        font-family: 'Lucida Handwriting', cursive, sans-serif;
    }
    .container {
        width: 100%;
        overflow: hidden;
        max-width: 340px;
        transition: .4s all ease;
        box-shadow: -.2em .2em 10px rgba(0, 0, 0, 0.1);
        border-radius: 1.2em;
        border: 1px solid rgb(128, 128, 128, .2);
        background-color: rgba(var(--white));
        transform: translateY(0) translateX(0) rotate(var(--rotation));
    }

    .container:hover{
        transform: translateY(0) translateX(0) rotate(0);
    }
    .container .container-content{
        box-shadow: inset .2em 0em 2px rgba(0, 0, 0, 0.1);
    }
    .container.things .skill-heading{
        overflow: hidden;
        border-radius: 1.4em 1.4em 0 0;
        box-shadow: inset .2em 0em 2px rgba(var(--minty-lime-dark));
        background-color: rgba(var(--minty-lime));
        color: rgba(var(--minty-lime-dark));
    }
    .container.product .skill-heading{
        overflow: hidden;
        border-radius: 1.4em 1.4em 0 0;
        box-shadow: inset .2em 0em 2px rgba(var(--pink-dark));
       background-color: rgba(var(--pink));
        color: rgba(var(--pink-dark));
    }
    .container.tools .skill-heading{
        overflow: hidden;
        border-radius: 1.4em 1.4em 0 0;
        box-shadow: inset .2em 0em 2px rgba(var(--blue-dark));
       background-color: rgba(var(--blue));
        color: rgba(var(--blue-dark));
    }

    .skill-heading {
        background-color: rgba(var(--minty-lime));
        color: rgba(var(--minty-lime-dark));
        text-align: center;
        padding: 0.5rem;
        margin-bottom: 1rem;
        border-radius: 4px;
    }

    .skill-list {
        list-style-type: none;
    }

    .skill-list li {
        padding: 0.5rem 1em;
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        font-weight: 600;
    }

    .skill-list li:last-child {
        border-bottom: none;
    }

    .container {
        opacity: 0;
        transform: translateY(100%) translateX(100%) rotate(0deg);
        transition: opacity 1s ease-out, transform 1s ease-out;
    }

    .container.animate {
        opacity: 1;
        transform: translateY(0) translateX(0) rotate(var(--rotation));
    }


    @keyframes slideIn {
        0% {
            opacity: 0;
            transform: translateY(100%) translateX(100%) rotate(0deg);
        }
        100% {
            opacity: 1;
            transform: translateY(0) translateX(0) rotate(var(--rotation));
        }
    }

    .container.things {
         --rotation: -6deg;
          animation-delay: 0.2s;
          transform: translateX(-100%) translateY(0) rotate(0deg);
         }
    .container.product {
         --rotation: 12deg;
          animation-delay: 0.4s;
          transform:  translateX(100%) translateY(0) rotate(0deg);
         }
    .container.tools {
         --rotation: 3deg;
         animation-delay: 0.6s;
          transform: translateX(-100%) translateY(0) rotate(0deg);
        }


@keyframes slideInLeft {
    0% {
        opacity: 0;
        transform: translateX(-100%) rotate(0deg);
    }
    100% {
        opacity: 1;
        transform: translateX(0) rotate(var(--rotation));
    }
}

@keyframes slideInRight {
    0% {
        opacity: 0;
        transform: translateX(100%) rotate(0deg);
    }
    100% {
        opacity: 1;
        transform: translateX(0) rotate(var(--rotation));
    }
}

.container.things.animate { animation: slideInLeft 1s forwards; }
.container.product.animate { animation: slideInRight 1s forwards; }
.container.tools.animate { animation: slideInLeft 1s forwards; }



@media screen and (max-width: 380px) {
    .container.things {
        transform: translate(0, 0);
    }
    .container.product {
        transform: translate(0, 0);
    }
    .container.tools {
        transform: translate(0, 0);
    }
}



</style>


<script>
    document.addEventListener('astro:page-load', () => {
        const containers = document.querySelectorAll('.container');
        const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('animate');
                    observer.unobserve(entry.target);
                }
            });
        }, { threshold: 0.1 });

        containers.forEach((container, index) => {
            setTimeout(() => {
                observer.observe(container);
            }, index * 200);
        });
    });
</script>